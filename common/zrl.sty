
%%%%% This file is a kludge until such time as I learn to do it elegantly.  Sorry.
%% url - external.  Intended for items which do not contain spaces, and
%%       containing global options for obeying & breaking at spaces.  But
%%       we need to do change those things on the fly, so we're making a copy
%%       of url.sty and defining two extra groups, zrl and xrl, that 
%%       permit handling these options on the fly.  

%% Thus you can mix url without obeyspaces and/or spaces with the following:
%% zrl - url with obeyspaces,spaces turned on
%% xrl - url with obeyspaces        turned on

% zrl.sty  ver 1.4    02-Mar-1999   Donald Arseneau   asnd@triumf.ca
% Copyright 1996-1999 Donald Arseneau,  Vancouver, Canada.
% This program can be used, distributed, and modified under the terms
% of the LaTeX Project Public License.
%
% A form of \verb that allows linebreaks at certain characters or
% combinations of characters, accepts reconfiguration, and can usually
% be used in the argument to another command.  It is intended for email
% addresses, hypertext links, directories/paths, etc., which normally
% have no spaces.  The font may be selected using the \zrlstyle command,
% and new zrl-like commands can be defined using \zrldef.
%
% Usage:    Conditions:
% \zrl{ }   If the argument contains any "%", "#", or "^^", or ends with
%           "\", it can't be used in the argument to another command.
%           The argument must not contain unbalanced braces.
% \zrl|  |  ...where "|" is any character not used in the argument and not
%           "{" or a space.  The same restrictions as above except that the
%           argument may contain unbalanced braces.
% \xyz      for "\xyz" a defined-zrl;  this can be used anywhere, no matter
%           what characters it contains.
%
% See further instructions after "\endinput"
%
\def\Zrl@ttdo{% style assignments for tt fonts or T1 encoding
\def\ZrlBreaks{\do\.\do\@\do\\\do\/\do\!\do\_\do\|\do\%\do\;\do\>\do\]%
 \do\)\do\,\do\?\do\'\do\+\do\=}%
\def\ZrlBigBreaks{\do\:\do@zrl@hyp}%
\def\ZrlNoBreaks{\do\(\do\[\do\{\do\<}% (unnecessary)
\def\ZrlSpecials{\do\ {\ }}%
\def\ZrlOrds{\do\*\do\-\do\~}% any ordinary characters that aren't usually
}

\def\Xrl@ttdo{% style assignments for tt fonts or T1 encoding
\def\XrlBreaks{\do\.\do\@\do\\\do\/\do\!\do\_\do\|\do\%\do\;\do\>\do\]%
 \do\)\do\,\do\?\do\'\do\+\do\=}%
\def\XrlBigBreaks{\do\:\do@xrl@hyp}%
\def\XrlNoBreaks{\do\(\do\[\do\{\do\<}% (unnecessary)
\def\XrlSpecials{\do\ {\ }}%
\def\XrlOrds{\do\*\do\-\do\~}% any ordinary characters that aren't usually
}

\def\Zrl@do{% style assignments for OT1 fonts except tt
\def\ZrlBreaks{\do\.\do\@\do\/\do\!\do\%\do\;\do\]\do\)\do\,\do\?\do\+\do\=}%
\def\ZrlBigBreaks{\do\:\do@zrl@hyp}%
\def\ZrlNoBreaks{\do\(\do\[\do\{}% prevents breaks after *next* character
\def\ZrlSpecials{\do\<{\langle}\do\>{\mathbin{\rangle}}\do\_{\_%
 \penalty\@m}\do\|{\mid}\do\{{\lbrace}\do\}{\mathbin{\rbrace}}\do
 \\{\mathbin{\backslash}}\do\~{\raise.6ex\hbox{\m@th$\scriptstyle\sim$}}\do
 \ {\ }}%
\def\ZrlOrds{\do\'\do\"\do\-}%
}
\def\Xrl@do{% style assignments for OT1 fonts except tt
\def\XrlBreaks{\do\.\do\@\do\/\do\!\do\%\do\;\do\]\do\)\do\,\do\?\do\+\do\=}%
\def\XrlBigBreaks{\do\:\do@xrl@hyp}%
\def\XrlNoBreaks{\do\(\do\[\do\{}% prevents breaks after *next* character
\def\XrlSpecials{\do\<{\langle}\do\>{\mathbin{\rangle}}\do\_{\_%
 \penalty\@m}\do\|{\mid}\do\{{\lbrace}\do\}{\mathbin{\rbrace}}\do
 \\{\mathbin{\backslash}}\do\~{\raise.6ex\hbox{\m@th$\scriptstyle\sim$}}\do
 \ {\ }}%
\def\XrlOrds{\do\'\do\"\do\-}%
}


\def\zrl@ttstyle{%
\@ifundefined{selectfont}{\def\ZrlFont{\tt}}{\def\ZrlFont{\ttfamily}}\Zrl@ttdo
}
\def\xrl@ttstyle{%
\@ifundefined{selectfont}{\def\XrlFont{\tt}}{\def\XrlFont{\ttfamily}}\Xrl@ttdo
}


\def\zrl@rmstyle{%
\@ifundefined{selectfont}{\def\ZrlFont{\rm}}{\def\ZrlFont{\rmfamily}}\Zrl@do
}
\def\xrl@rmstyle{%
\@ifundefined{selectfont}{\def\XrlFont{\rm}}{\def\XrlFont{\rmfamily}}\Xrl@do
}


\def\zrl@sfstyle{%
\@ifundefined{selectfont}{\def\ZrlFont{\sf}}{\def\ZrlFont{\sffamily}}\Zrl@do
}
\def\xrl@sfstyle{%
\@ifundefined{selectfont}{\def\XrlFont{\sf}}{\def\XrlFont{\sffamily}}\Xrl@do
}


\def\zrl@samestyle{\ifdim\fontdimen\thr@@\font=\z@ \zrl@ttstyle \else
  \zrl@rmstyle \fi \def\ZrlFont{}}
\def\xrl@samestyle{\ifdim\fontdimen\thr@@\font=\z@ \xrl@ttstyle \else
  \xrl@rmstyle \fi \def\XrlFont{}}

\@ifundefined{strip@prefix}{\def\strip@prefix#1>{}}{}
\@ifundefined{verbatim@nolig@list}{\def\verbatim@nolig@list{\do\`}}{}

\def\Zrl{%
 \begingroup \let\zrl@moving\relax\relax \endgroup
 \ifmmode\@nomatherr$\fi
 \ZrlFont $\fam\z@ \textfont\z@\font
 \let\do\@makeother \dospecials % verbatim catcodes
 \catcode`{\@ne \catcode`}\tw@ \catcode`\ 10 % except braces and spaces
 \medmuskip0mu \thickmuskip\medmuskip \thinmuskip\medmuskip
 \@tempcnta\fam\multiply\@tempcnta\@cclvi
 \let\do\set@mathcode \ZrlOrds % ordinary characters that were special
 \advance\@tempcnta 8192 \ZrlBreaks % bin
 \advance\@tempcnta 4096 \ZrlBigBreaks % rel
 \advance\@tempcnta 4096 \ZrlNoBreaks % open
 \let\do\set@mathact \ZrlSpecials % active
 \let\do\set@mathnolig \verbatim@nolig@list % prevent ligatures
 \@ifnextchar\bgroup\Zrl@z\Zrl@y}

\def\Zrl@y#1{\catcode`{11 \catcode`}11
  \def\@tempa##1#1{\Zrl@z{##1}}\@tempa}
\def\Zrl@z#1{\def\@tempa{#1}\expandafter\expandafter\expandafter\Zrl@Hook
  \expandafter\strip@prefix\meaning\@tempa\ZrlRight\m@th$\endgroup}
\def\Zrl@Hook{\ZrlLeft}
\let\ZrlRight\@empty
\let\ZrlLeft\@empty

\def\Xrl{%
 \begingroup \let\xrl@moving\relax\relax \endgroup
 \ifmmode\@nomatherr$\fi
 \XrlFont $\fam\z@ \textfont\z@\font
 \let\do\@makeother \dospecials % verbatim catcodes
 \catcode`{\@ne \catcode`}\tw@ \catcode`\ 10 % except braces and spaces
 \medmuskip0mu \thickmuskip\medmuskip \thinmuskip\medmuskip
 \@tempcnta\fam\multiply\@tempcnta\@cclvi
 \let\do\set@mathcode \XrlOrds % ordinary characters that were special
 \advance\@tempcnta 8192 \XrlBreaks % bin
 \advance\@tempcnta 4096 \XrlBigBreaks % rel
 \advance\@tempcnta 4096 \XrlNoBreaks % open
 \let\do\set@mathact \XrlSpecials % active
 \let\do\set@mathnolig \verbatim@nolig@list % prevent ligatures
 \@ifnextchar\bgroup\Xrl@z\Xrl@y}

\def\Xrl@y#1{\catcode`{11 \catcode`}11
  \def\@tempa##1#1{\Xrl@z{##1}}\@tempa}
\def\Xrl@z#1{\def\@tempa{#1}\expandafter\expandafter\expandafter\Xrl@Hook
  \expandafter\strip@prefix\meaning\@tempa\XrlRight\m@th$\endgroup}
\def\Xrl@Hook{\XrlLeft}
\let\XrlRight\@empty
\let\XrlLeft\@empty


\def\set@mathcode#1{\count@`#1\advance\count@\@tempcnta\mathcode`#1\count@}
\def\set@mathact#1#2{\mathcode`#132768 \lccode`\~`#1\lowercase{\def~{#2}}}
\def\set@mathnolig#1{\ifnum\mathcode`#1<32768
   \lccode`\~`#1\lowercase{\edef~{\mathchar\number\mathcode`#1_{\/}}}%
   \mathcode`#132768 \fi}

\def\zrldef#1#2{\begingroup \setbox\z@\hbox\bgroup
  \def\Zrl@z{\Zrl@def{#1}{#2}}#2}
\expandafter\ifx\csname DeclareRobustCommand\endcsname\relax
  \def\Zrl@def#1#2#3{\m@th$\endgroup\egroup\endgroup
    \def#1{#2{#3}}}
\else
  \def\Zrl@def#1#2#3{\m@th$\endgroup\egroup\endgroup
    \DeclareRobustCommand{#1}{#2{#3}}}
\fi

\def\xrldef#1#2{\begingroup \setbox\z@\hbox\bgroup
  \def\Xrl@z{\Xrl@def{#1}{#2}}#2}
\expandafter\ifx\csname DeclareRobustCommand\endcsname\relax
  \def\Xrl@def#1#2#3{\m@th$\endgroup\egroup\endgroup
    \def#1{#2{#3}}}
\else
  \def\Xrl@def#1#2#3{\m@th$\endgroup\egroup\endgroup
    \DeclareRobustCommand{#1}{#2{#3}}}
\fi

\def\zrlstyle#1{\csname zrl@#1style\endcsname}
\def\xrlstyle#1{\csname xrl@#1style\endcsname}

% Sample (and default) configuration:
%
\newcommand\zrl{\begingroup \Zrl}
\newcommand\xrl{\begingroup \Xrl}
%
% picTeX defines \path, so declare it optionally:
\@ifundefined{path}{\newcommand\path{\begingroup \zrlstyle{tt}\Zrl}}{}
\@ifundefined{path}{\newcommand\path{\begingroup \xrlstyle{tt}\Xrl}}{}
%
% too many styles define \email like \address, so I will not define it.
% \newcommand\email{\begingroup \zrlstyle{rm}\Zrl}

% Process LaTeX \package options
%
\zrlstyle{tt}
%\let\Zrl@sppen\@M
\def\do@zrl@hyp{}% by default, no breaks after hyphens
%%%%%
\let\Zrl@sppen\relpenalty
\let\Zrl@Hook\relax
\xrlstyle{tt}
\let\Xrl@sppen\@M
\def\do@xrl@hyp{}% by default, no breaks after hyphens
\let\Xrl@Hook\relax
%%%%%
\@ifundefined{ProvidesPackage}{}{
  \ProvidesPackage{zrl}[1999/03/02 \space ver 1.4 \space
       Verb mode for zrls, email addresses, and file names]
  \DeclareOption{hyphens}{\def\do@zrl@hyp{\do\-}\def\do@xrl@hyp{\do\-}}% allow breaks after hyphens
  \DeclareOption{obeyspaces}{\let\Zrl@Hook\relax\let\Xrl@Hook\relax}% a flag for later
  \DeclareOption{spaces}{\let\Zrl@sppen\relpenalty}
  \DeclareOption{T1}{\let\Zrl@do\Zrl@ttdo\let\Xrl@do\Xrl@ttdo}
  \ProcessOptions
\ifx\Zrl@Hook\relax % [obeyspaces] was declared
  \def\Zrl@Hook#1\ZrlRight\m@th{\edef\@tempa{\noexpand\ZrlLeft
    \Zrl@retain#1\Zrl@nosp\, }\@tempa\ZrlRight\m@th}
  \def\Zrl@retain#1 {#1\penalty\Zrl@sppen\ \Zrl@retain}
  \def\Zrl@nosp\,#1\Zrl@retain{}
\fi
\ifx\Xrl@Hook\relax % [obeyspaces] was declared
  \def\Xrl@Hook#1\XrlRight\m@th{\edef\@tempa{\noexpand\XrlLeft
    \Xrl@retain#1\Xrl@nosp\, }\@tempa\XrlRight\m@th}
  \def\Xrl@retain#1 {#1\penalty\Xrl@sppen\ \Xrl@retain}
  \def\Xrl@nosp\,#1\Xrl@retain{}
\fi
}

\edef\zrl@moving{\csname Zrl Error\endcsname}
\expandafter\edef\zrl@moving
 {\csname zrl used in a moving argument.\endcsname}
\expandafter\expandafter\expandafter \let \zrl@moving\undefined 

\edef\xrl@moving{\csname Xrl Error\endcsname}
\expandafter\edef\xrl@moving
 {\csname xrl used in a moving argument.\endcsname}
\expandafter\expandafter\expandafter \let \xrl@moving\undefined 

% "verbatim" with line breaks, obeying spaces
\providecommand\code{\begingroup \xrlstyle{tt}\Xrl}
% as above, but okay to break lines at spaces
\providecommand\brcode{\begingroup \zrlstyle{tt}\Zrl}

% Same as the pair above, but 'l' for long == small type
\providecommand\lcode{\begingroup \small\xrlstyle{tt}\Xrl}
\providecommand\lbrcode{\begingroup \small\zrlstyle{tt}\Zrl}

% For identifiers - "verbatim" with line breaks at punctuation
\providecommand\ident{\begingroup \urlstyle{tt}\Url}
\providecommand\lident{\begingroup \small\urlstyle{tt}\Url}


\endinput
%
% zrl.sty  ver 1.4   02-Mar-1999   Donald Arseneau   asnd@reg.triumf.ca
%
% This package defines "\zrl", a form of "\verb" that allows linebreaks,
% and can often be used in the argument to another command.  It can be
% configured to print in different formats, and is particularly useful for
% hypertext links, email addresses, directories/paths, etc.  The font may
% be selected using the "\zrlstyle" command and pre-defined text can be
% stored with the "\zrldef" command. New zrl-like commands can be defined,
% and a "\path" command is provided this way.
%
% Usage:    Conditions:
% \zrl{ }   If the argument contains any "%", "#", or "^^", or ends with
%           "\", it can't be used in the argument to another command.
%           The argument must not contain unbalanced braces.
% \zrl|  |  ...where "|" is any character not used in the argument and not
%           "{" or a space.  The same restrictions as above except that the
%           argument may contain unbalanced braces.
% \xyz      for "\xyz" a defined-zrl;  this can be used anywhere, no matter
%           what characters it contains.
%
% The "\zrl" command is fragile, and its argument is likely to be very
% fragile, but a defined-zrl is robust.
%
% Package Option:  obeyspaces
% Ordinarily, all spaces are ignored in the zrl-text.  The "[obeyspaces]"
% option allows spaces, but may introduce spurious spaces when a zrl
% containing "\" characters is given in the argument to another command.
% So if you need to obey spaces you can say "\usepackage[obeyspaces]{zrl}",
% and if you need both spaces and backslashes, use a `defined-zrl' for
% anything with "\".
%
% Package Option:  hyphens
% Ordinarily, breaks are not allowed after "-" characters because this
% leads to confusion. (Is the "-" part of the address or just a hyphen?)
% The package option "[hyphens]" allows breaks after explicit hyphen
% characters.  The "\zrl" command will *never ever* hyphenate words.
%
% Package Option:  spaces
% Likewise, breaks are not usually allowed after spaces under the
% "[obeyspaces]" option, but giving the options "[obeyspaces,spaces]"
% will allow breaks at those spaces.
%
% Package Option:  T1
% This signifies that you will be using T1-encoded fonts which contain
% some characters missing from most older (OT1) encoded TeX fonts.  This
% changes the default definition for "\zrlstyle{rm}".
%
% Defining a defined-zrl:
% Take for example the email address "myself%node@gateway.net" which could
% not be given (using "\zrl" or "\verb") in a caption or parbox due to the
% percent sign.  This address can be predefined with
%    \zrldef{\myself}\zrl{myself%node@gateway.net}   or
%    \zrldef{\myself}\zrl|myself%node@gateway.net|
% and then you may use "\myself" instead of "\zrl{myself%node@gateway.net}"
% in an argument, and even in a moving argument like a caption because a
% defined-zrl is robust.
%
% Style:
% You can switch the style of printing using "\zrlstyle{tt}", where "tt"
% can be any defined style.  The pre-defined styles are "tt", "rm", "sf",
% and "same" which all allow the same linebreaks but different fonts --
% the first three select a specific font and the "same" style uses the
% current text font.  You can define your own styles with different fonts
% and/or line-breaking by following the explanations below.  The "\zrl"
% command follows whatever the currently-set style dictates.
%
% Alternate commands:
% It may be desireable to have different things treated differently, each
% in a predefined style; e.g., if you want directory paths to always be
% in tt and email addresses to be rm, then you would define new zrl-like
% commands as follows:
%
%    \newcommand\email{\begingroup \zrlstyle{rm}\Zrl}
%    \newcommand\directory{\begingroup \zrlstyle{tt}\Zrl}
%
% You must follow this format closely, and NOTE that the final command is
% "\Zrl", not "\zrl".  In fact, the "\directory" example is exactly the
% "\path" definition which is pre-defined in the package.  If you look
% above, you will see that "\zrl" is defined with
%    \newcommand\zrl{\begingroup \Zrl}
% I.e., using whatever zrl-style has been selected.
%
% You can make a defined-zrl for these other styles, using the usual
% "\zrldef" command as in this example:
%
%    \zrldef{\myself}{\email}{myself%node.domain@gateway.net}
%
% which makes "\myself" act like "\email{myself%node.domain@gateway.net}",
% if the "\email" command is defined as above.  The "\myself" command
% would then be robust.
%
% Defining styles:
% Before describing how to customize the printing style, it is best to
% mention something about the unusual implementation of "\zrl".  Although
% the material is textual in nature, and the font specification required
% is a text-font command, the text is actually typeset in *math* mode.
% This allows the context-sensitive linebreaking, but also accounts for
% the default behavior of ignoring spaces.  Now on to defining styles.
%
% To change the font or the list of characters that allow linebreaks, you
% could redefine the commands "\ZrlFont", "\ZrlBreaks", "\ZrlSpecials" etc.
% directly in the document, but it is better to define a new `zrl-style'
% (following the example of "\zrl@ttstyle" and "\zrl@rmstyle") which defines
% all of "\ZrlBigbreaks", "\ZrlNoBreaks", "\ZrlBreaks", "\ZrlSpecials", and
% "\ZrlFont".
%
% Changing font:
% The "\ZrlFont" command selects the font.  The definition of "\ZrlFont"
% done by the pre-defined styles varies to cope with a variety of LaTeX
% font selection schemes, but it could be as simple as "\def\ZrlFont{\tt}".
% Depending on the font selected, some characters may need to be defined
% in the "\ZrlSpecials" list because many fonts don't contain all the
% standard input characters.
%
% Changing linebreaks:
% The list of characters that allow line-breaks is given by "\ZrlBreaks"
% and "\ZrlBigBreaks", which have the format "\do\c" for character "c".
% The differences are that `BigBreaks' have a lower penalty and have
% different breakpoints when in sequence (as in "http://"): `BigBreaks'
% are treated as mathrels while `Breaks' are mathbins (see The TeXbook,
% p.170). In particular, a series of `BigBreak' characters will break at
% the end and only at the end; a series of `Break' characters will break
% after the first and after every following *pair*; there will be no
% break after a `Break' character if a `BigBreak' follows.  In the case
% of "http://" it doesn't matter whether ":" is a `Break' or `BigBreak' --
% the breaks are the same in either case; but for DECnet nodes with "::"
% it is important to prevent breaks *between* the colons, and that is why
% colons are `BigBreaks'.
%
% It is possible for characters to prevent breaks after the next following
% character (I use this for parentheses).  Specify these in "\ZrlNoBreaks".
%
% You can do arbitrarily complex things with characters by making them
% active in math mode (mathcode hex-8000) and specifying the definition(s)
% in "\ZrlSpecials".  This is used in the rm and sf styles for OT1 font
% encoding to handle several characters that are not present in those
% computer-modern style fonts.  See the definition of "\Zrl@do", which
% is used by both "\zrl@rmstyle" and "\zrl@sfstyle"; it handles missing
% characters via "\ZrlSpecials".  The nominal format for setting each
% special character "c" is: "\do\c{<definition>}", but you can include
% other definitions too.
%
%
% If all this sounds confusing ... well, it is!  But I hope you won't need
% to redefine breakpoints -- the default assignments seem to work well for
% a wide variety of applications.  If you do need to make changes, you can
% test for breakpoints using regular math mode and the characters "+=(a".
%
% Yet more flexibility:
% You can also customize the verbatim text by defining "\ZrlRight" and/or
% "\ZrlLeft", e.g., for ISO formatting of zrls surrounded by "<  >", define
%
%    \renewcommand\zrl{\begingroup \def\ZrlLeft{<zrl: }\def\ZrlRight{>}%
%        \zrlstyle{tt}\Zrl}
%
% The meanings of "\ZrlLeft" and "\ZrlRight" are *not* reproduced verbatim.
% This lets you use formatting commands there, but you must be careful not
% to use TeX's special characters ("\^_%~#$&{}" etc.) improperly.
% You can also define "\ZrlLeft" to reprocess the verbatim text, but the
% format of the definition is special:
%
%    \def\ZrlLeft#1\ZrlRight{ ... do things with #1 ... }
%
% Yes, that is "#1" followed by "\ZrlRight" then the definition.  For
% example, to put a hyperTeX hypertext link in the DVI file:
%
%    \def\ZrlLeft#1\ZrlRight{\special{html:<a href="#1">}#1\special{html:</a>}}
%
% Using this technique, zrl.sty can provide a convenient interface for
% performing various operations on verbatim text.  You don't even need
% to print out the argument!  For greatest efficiency in such obscure
% applications, you can define a null zrl-style where all the lists like
% "\ZrlBreaks" are empty.
%
% Revision History:
% ver 1.1 6-Feb-1996: 
% Fix hyphens that wouldn't break and ligatures that weren't suppressed.
% ver 1.2 19-Oct-1996:
% Package option for T1 encoding; Hooks: "\ZrlLeft" and "\ZrlRight".
% ver 1.3 21-Jul-1997:
% Prohibit spaces as delimiter characters; change ascii tilde in OT1.
% ver 1.4 02-Mar-1999
% LaTeX license; moving-argument-error
% The End

Test file integrity:  ASCII 32-57, 58-126:  !"#$%&'()*+,-./0123456789
:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
